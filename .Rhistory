total_mentions.y = coalesce(total_mentions.y, 0)
)
combined_data <- combined_data %>%
mutate(
total_mentions_combined = total_mentions + total_mentions.y,
unique_mentions_combined = unique_mentions + unique_mentions.y,
cities_mentioned_combined = map2(cities_mentioned, cities_mentioned.y, c)
) %>%
dplyr::select(page_name, total_mentions_combined, unique_mentions_combined, cities_mentioned_combined)
#Remove NAs
combined_data <- combined_data %>%
mutate(
total_mentions_combined = coalesce(total_mentions_combined, 0),
unique_mentions_combined = coalesce(unique_mentions_combined, 0)
)
mean(combined_data$unique_mentions_combined, na.rm = TRUE)
median(combined_data$unique_mentions_combined, na.rm = TRUE)
sd(combined_data$unique_mentions_combined, na.rm = TRUE)
mean(muni_mentions_analysis_ads_combined$total_mentions_combined, na.rm = TRUE)
median(muni_mentions_analysis_ads_combined$total_mentions_combined, na.rm = TRUE)
sd(muni_mentions_analysis_ads_combined$total_mentions_combined, na.rm = TRUE)
mean(combined_data$total_mentions_combined, na.rm = TRUE)
median(combined_data$total_mentions_combined, na.rm = TRUE)
sd(combined_data$total_mentions_combined, na.rm = TRUE)
View(MGMunicipalities_Clean)
IBGE_ads <- left_join(muni4, MGMunicipalities_Clean, by = "name_muni", copy = T, keep = FALSE)
IBGE_ads <- replace(IBGE_ads, is.na(IBGE_ads), 0)
sum(IBGE_ads$n <10, na.rm=TRUE)
str(IBGE_ads)
CorrelationPopulation_ads <- cor.test(IBGE_ads$n, IBGE_ads$Population,
method = "pearson")
CorrelationPIB_ads <- cor.test(IBGE_ads$n, IBGE_ads$PIB_per_capita,
method = "pearson")
CorrelationIDHM_ads <- cor.test(IBGE_ads$n, IBGE_ads$GINI,
method = "pearson")
CorrelationUrbanArea_ads <- cor.test(IBGE_ads$n, IBGE_ads$Urban_Area,
method = "pearson")
CorrelationUrbanArea_ads <- cor.test(IBGE_ads$n, IBGE_ads$Urban_Area,
method = "pearson")
CorrelationPopulation_ads
CorrelationIDHM_ads
CorrelationPIB_ads
CorrelationUrbanArea_ads
hist(IBGE_ads$n,
breaks = 100,  # Choose the number of bins automatically using the 'FD' method
col = "skyblue",  # Set the color of the bars
border = "white",  # Set the color of the bar borders
ylab = "",
xlab = "",  # Set the x-axis label
main = "Histogram of Mentions"  # Set the main title
)
View(IBGE_ads)
IBGE_ads_log <- IBGE_ads
IBGE_ads_log$Population <- log(IBGE_ads_log$Population + 1)
IBGE_ads_log$PIB_per_capita <- log(IBGE_ads_log$PIB_per_capita + 1)
IBGE_ads_log$Urban_Area <- log(IBGE_ads_log$Urban_Area + 1)
IBGE_ads_log$Demographic_Density <- log(IBGE_ads_log$Demographic_Density + 1)
View(IBGE_ads)
Model_ads_Geo <- lm(n ~ Population + GINI + PIB_per_capita + PIB_per_capita + Urban_Area + Demographic_Density,
data = IBGE_ads_log)
omnibus_ads_geo <- Anova(Model_ads_Geo, type = "III")
omnibus_ads_geo
# Check for multicollinearity using vif()
vif_ads_geo <- vif(Model_ads_Geo)
print(vif_ads_geo)
summary(Model_ads_Geo)
IBGE_ads_clean <- IBGE_ads %>%
filter(!is.na(n))
BV_ads <- ggplot()+
geom_jitter(data=IBGE_ads_log, aes(x = n, y = Population_2021, text=name_muni)) +
labs(title = "Relationship between mentions in ads and population (estimated for 2021)", x = "Mentions in ads", y = "population")+
guides(fill = guide_colourbar(title = "Mentions"))
InteractivePopulation_ads <- plotly::ggplotly(BV_ads)
IBGE_ads_clean <- IBGE_ads %>%
filter(!is.na(n))
BV_ads <- ggplot()+
geom_jitter(data=IBGE_ads_log, aes(x = n, y = Population, text=name_muni)) +
labs(title = "Relationship between mentions in ads and population (estimated for 2021)", x = "Mentions in ads", y = "population")+
guides(fill = guide_colourbar(title = "Mentions"))
InteractivePopulation_ads <- plotly::ggplotly(BV_ads)
InteractivePopulation_ads
################
#####  ?  ######
#####  ?  ######
#####  ?  ######
################
Map_ads_TEST <- ggplot() +
geom_sf(data=IBGE_ads, aes(fill=n, text = paste(name_muni, "population:", Population), geometry = geom), color= NA, size=.15) +
labs(title="2022 Election: municipalities mentioned", size=10) +
guides(fill = guide_colourbar(title = "Mentions")) +
theme_minimal() +
theme(axis.line = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank(),
panel.grid = element_blank()) +
scale_fill_viridis(option="viridis")
InteractiveMap_ads <- ggplotly(Map_ads_TEST) %>%
layout(title = list(text = paste0("<B>2022 Election: municipalities mentioned in ads</B>")))
InteractiveMap_ads
remove(Map_ads_TEST)
Map_ads <- ggplot() +
geom_sf(data=IBGE_ads, aes(fill=n, text = paste(name_muni, "population:", Population), geometry = geom), color= NA, size=.15) +
labs(title="2022 Election: municipalities mentioned", size=10) +
guides(fill = guide_colourbar(title = "Mentions")) +
theme_minimal() +
theme(axis.line = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank(),
panel.grid = element_blank()) +
scale_fill_viridis(option="viridis")
InteractiveMap_ads <- ggplotly(Map_ads) %>%
layout(title = list(text = paste0("<B>2022 Election: municipalities mentioned in ads</B>")))
InteractiveMap_ads
InteractiveMap
Map_ads <- ggplot() +
geom_sf(data=IBGE_ads, aes(fill=n, text = paste(name_muni, "population:", Population), geometry = geom), color= NA, size=.15) +
labs(title="2022 Election: municipalities mentioned", size=10) +
guides(fill = guide_colourbar(title = "Mentions")) +
theme_minimal() +
theme(axis.line = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank(),
panel.grid = element_blank()) +
scale_fill_viridis()
InteractiveMap_ads <- ggplotly(Map_ads) %>%
layout(title = list(text = paste0("<B>2022 Election: municipalities mentioned in ads</B>")))
InteractiveMap_ads
IBGE_ads_TEST <- st_as_sf(IBGE_ads, wkt = "geom")
remove(IBGE_ads_TEST)
# Ploting an interactive choropleth map
Map_ads <- ggplot() +
geom_sf(data=IBGE_ads, aes(fill=n, text = paste(name_muni, "population:", Population), geometry = geom), color= NA, size=.15) +
labs(title="2022 Election: municipalities mentioned", size=10) +
guides(fill = guide_colourbar(title = "Mentions")) +
theme_minimal() +
theme(axis.line = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank(),
panel.grid = element_blank()) +
scale_fill_gradient(low = "lightblue", high = "darkblue")
InteractiveMap_ads <- ggplotly(Map_ads) %>%
layout(title = list(text = paste0("<B>2022 Election: municipalities mentioned in ads</B>")))
InteractiveMap_ads
# Ploting an interactive choropleth map
Map_ads <- ggplot() +
geom_sf(data=IBGE_ads, aes(fill=n, text = paste(name_muni, "population:", Population), geometry = geom), color= NA, size=.15) +
labs(title="2022 Election: municipalities mentioned", size=10) +
guides(fill = guide_colourbar(title = "Mentions")) +
theme_minimal() +
theme(axis.line = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank(),
panel.grid = element_blank()) +
scale_fill_viridis(limits = c(0, 2000), breaks = seq(0, 2000, by = 250))
InteractiveMap_ads <- ggplotly(Map_ads) %>%
layout(title = list(text = paste0("<B>2022 Election: municipalities mentioned in ads</B>")))
InteractiveMap_ads
# Ploting an interactive choropleth map
Map <- ggplot() +
geom_sf(data=IBGE, aes(fill=n, text = paste(name_muni, "population:", Population), geometry = geom), color= NA, size=.15) +
labs(title="2022 Election: municipalities mentioned", size=10) +
guides(fill = guide_colourbar(title = "Mentions")) +
theme_minimal() +
theme(axis.line = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank(),
panel.grid = element_blank()) +
scale_fill_viridis(limits = c(0, 2000), breaks = seq(0, 2000, by = 250))
InteractiveMap <- ggplotly(Map) %>%
layout(title = list(text = paste0("<B>2022 Election: municipalities mentioned</B>")))
InteractiveMap
# Ploting an interactive choropleth map
Map <- ggplot() +
geom_sf(data=IBGE, aes(fill=n, text = paste(name_muni, "population:", Population), geometry = geom), color= NA, size=.15) +
labs(title="2022 Election: municipalities mentioned", size=10) +
guides(fill = guide_colourbar(title = "Mentions")) +
theme_minimal() +
theme(axis.line = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank(),
panel.grid = element_blank()) +
scale_fill_viridis(limits = c(0, 2200), breaks = seq(0, 2200, by = 250))
InteractiveMap <- ggplotly(Map) %>%
layout(title = list(text = paste0("<B>2022 Election: municipalities mentioned</B>")))
InteractiveMap
# Ploting an interactive choropleth map
Map <- ggplot() +
geom_sf(data=IBGE, aes(fill=n, text = paste(name_muni, "population:", Population), geometry = geom), color= NA, size=.15) +
labs(title="2022 Election: municipalities mentioned", size=10) +
guides(fill = guide_colourbar(title = "Mentions")) +
theme_minimal() +
theme(axis.line = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank(),
panel.grid = element_blank()) +
scale_fill_viridis(limits = c(0, 2200))
InteractiveMap <- ggplotly(Map) %>%
layout(title = list(text = paste0("<B>2022 Election: municipalities mentioned</B>")))
InteractiveMap
# Ploting an interactive choropleth map
Map_ads <- ggplot() +
geom_sf(data=IBGE_ads, aes(fill=n, text = paste(name_muni, "population:", Population), geometry = geom), color= NA, size=.15) +
labs(title="2022 Election: municipalities mentioned", size=10) +
guides(fill = guide_colourbar(title = "Mentions")) +
theme_minimal() +
theme(axis.line = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank(),
panel.grid = element_blank()) +
scale_fill_viridis(limits = c(0, 2200))
InteractiveMap_ads <- ggplotly(Map_ads) %>%
layout(title = list(text = paste0("<B>2022 Election: municipalities mentioned in ads</B>")))
InteractiveMap_ads
# Ploting an interactive choropleth map
Map_ads2 <- ggplot() +
geom_sf(data=IBGE_ads, aes(fill=n, text = paste(name_muni, "population:", Population), geometry = geom), color= NA, size=.15) +
labs(title="2022 Election: municipalities mentioned", size=10) +
guides(fill = guide_colourbar(title = "Mentions")) +
theme_minimal() +
theme(axis.line = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank(),
panel.grid = element_blank()) +
scale_fill_viridis()
InteractiveMap_ads2 <- ggplotly(Map_ads2) %>%
layout(title = list(text = paste0("<B>2022 Election: municipalities mentioned in ads</B>")))
InteractiveMap_ads2
View(combined_data)
View(muni_mentions_analysis_combined)
View(muni_mentions_analysis_ads_combined)
View(muni_mentions_analysis)
View(muni_ambiguous_analysis)
# Check for multicollinearity using vif()
vif_ads_geo <- vif(Model_ads_Geo)
print(vif_ads_geo)
summary(Model_ads_Geo)
View(muni4)
View(IBGE_ads)
View(IBGE_Zeros)
View(IBGE_log)
save.image("C:/Users/andre/Documents/GitHub/Cartographies2022BRElection/CartographiesEnvironment(Oct2023).RData")
options(scipen = 999)  #R uses scientific notations as a default.
#citation("DHARMa")
library(tidyverse)
library(readr)
library(stringdist)
library(datasets)
library(janitor)
library(lubridate)
library(tidytext)
library(stringr)
library(tokenizers)
library(wordcloud)
library(textdata)
library(geobr)
library(ggplot2)
library(sf)
library(dplyr)
library(ggmap)
library(broom)
library(RColorBrewer)
library(viridis)
library(igraph)
library(ggraph)
library(widyr)
library(janeaustenr)
library("lexiconPT")
library(stringi)
library(purrr)
#Regression analysis
#install.packages("caret")
#install.packages("car")
#install.packages("leaps")
#install.packages("MASS")
#install.packages("partykit")
#install.packages("nnet")
#install.packages("EMT")
#install.packages("DHARMa")
library(caret)
library(car)
library(leaps)
library(MASS)
library(partykit)
library(nnet)
library(EMT)
library(DHARMa)
#DATA VISUALIZATION
#install.packages('maps')
#install.packages("tibble")
#install.packages("forcats")
#install.packages("plotly")
library(maps)
library(plotly)
library(tibble)
library(forcats)
#Facebook Ads
library(highcharter)
library(httr)
library(furrr)
library(remotes)
InteractiveMap
### ---- Load Packages and Functions  ####
#devtools::install_github("facebookresearch/Radlibrary")
#remotes::install_github("favstats/metatargetr")
library(tidyverse)
library(tidytext)
library(dplyr)
library(janitor)
library(highcharter)
library(httr)
library(furrr)
library(remotes)
library(lubridate)
library(purrr)
library(data.table)
library(stringdist)
#DATA VISUALIZATION
#install.packages('maps')
#install.packages("tibble")
#install.packages("forcats")
#install.packages("plotly")
#install.packages("sf")
library(ggplot2)
library(plotly)
library(sf)
library(maps)
library(tibble)
library(forcats)
#Regression analysis
#install.packages("caret")
#install.packages("car")
#install.packages("leaps")
#install.packages("MASS")
#install.packages("partykit")
#install.packages("nnet")
#install.packages("EMT")
library(caret)
library(car)
library(leaps)
library(MASS)
library(partykit)
library(nnet)
library(EMT)
#################################
###########FUNCTIONS#############
#################################
#Other functions
get_mid <- function(spend_upper_bound, spend_lower_bound) {
# (spend_upper_bound-spend_lower_bound)/2+spend_lower_bound
(spend_upper_bound+spend_lower_bound)/2
}
assign_colors <- function(dat, n = 12) {
color_sample <- colorspace::divergingx_hcl(n)
lenght <- dat$color[is.na(dat$color)] %>% length
if(lenght==0) return(invisible())
cols <- sample(color_sample, lenght, replace = T)
dat$color[is.na(dat$color)] <- cols
return(dat)
}
unnest_geos <- function(x) {
# cat(glue::glue("{x$row_number} out of {nrow(age_gender_targeted_raw)} ({round(100*x$row_number/nrow(age_gender_targeted_raw), 2)}%)\n\n"))
x %>%
dplyr::pull(region_distribution) %>%
flatten() %>%
map_dfr(flatten) %>%
mutate(id = x$id)%>%
mutate(start_time = x$start_time)%>%
mutate(advertiser_name = x$advertiser_name)
}
unnest_dems <- function(x) {
# cat(glue::glue("{x$row_number} out of {nrow(age_gender_targeted_raw)} ({round(100*x$row_number/nrow(age_gender_targeted_raw), 2)}%)\n\n"))
x %>%
dplyr::pull(demographic_distribution) %>%
flatten() %>%
map_dfr(flatten) %>%
mutate(id = x$id)
}
last_updated_time <- as.character(Sys.time())
# Ploting an interactive choropleth map
Map_ads2 <- ggplot() +
geom_sf(data=IBGE_ads, aes(fill=n, text = paste(name_muni, "population:", Population), geometry = geom), color= NA, size=.15) +
labs(title="2022 Election: municipalities mentioned", size=10) +
guides(fill = guide_colourbar(title = "Mentions")) +
theme_minimal() +
theme(axis.line = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank(),
panel.grid = element_blank()) +
scale_fill_viridis(palette = "plasma")
InteractiveMap_ads2 <- ggplotly(Map_ads2) %>%
layout(title = list(text = paste0("<B>2022 Election: municipalities mentioned in ads</B>")))
Map_ads2 <- ggplot() +
geom_sf(data=IBGE_ads, aes(fill=n, text = paste(name_muni, "population:", Population), geometry = geom), color= NA, size=.15) +
labs(title="2022 Election: municipalities mentioned", size=10) +
guides(fill = guide_colourbar(title = "Mentions")) +
theme_minimal() +
theme(axis.line = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank(),
panel.grid = element_blank()) +
scale_fill_viridis(palette = "plasma")
InteractiveMap_ads2 <- ggplotly(Map_ads2) %>%
layout(title = list(text = paste0("<B>2022 Election: municipalities mentioned in ads</B>")))
# Ploting an interactive choropleth map
Map <- ggplot() +
geom_sf(data=IBGE, aes(fill=n, text = paste(name_muni, "population:", Population), geometry = geom), color= NA, size=.15) +
labs(title="2022 Election: municipalities mentioned", size=10) +
guides(fill = guide_colourbar(title = "Mentions")) +
theme_minimal() +
theme(axis.line = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank(),
panel.grid = element_blank()) +
scale_fill_viridis(palette = "plasma")
InteractiveMap <- ggplotly(Map) %>%
layout(title = list(text = paste0("<B>2022 Election: municipalities mentioned</B>")))
load("C:/Users/andre/Documents/GitHub/Cartographies2022BRElection/CartographiesEnvironment(Oct2023).RData")
# Ploting an interactive choropleth map
Map <- ggplot() +
geom_sf(data=IBGE, aes(fill=n, text = paste(name_muni, "population:", Population), geometry = geom), color= NA, size=.15) +
labs(title="2022 Election: municipalities mentioned", size=10) +
guides(fill = guide_colourbar(title = "Mentions")) +
theme_minimal() +
theme(axis.line = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank(),
panel.grid = element_blank()) +
scale_fill_viridis(palette = "plasma")
InteractiveMap <- ggplotly(Map) %>%
layout(title = list(text = paste0("<B>2022 Election: municipalities mentioned</B>")))
# Ploting an interactive choropleth map
Map <- ggplot() +
geom_sf(data=IBGE, aes(fill=n, text = paste(name_muni, "population:", Population), geometry = geom), color= NA, size=.15) +
labs(title="2022 Election: municipalities mentioned", size=10) +
guides(fill = guide_colourbar(title = "Mentions")) +
theme_minimal() +
theme(axis.line = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank(),
panel.grid = element_blank()) +
scale_fill_viridis(palette = "plasma")
InteractiveMap <- ggplotly(Map) %>%
layout(title = list(text = paste0("<B>2022 Election: municipalities mentioned</B>")))
# Ploting an interactive choropleth map
Map <- ggplot() +
geom_sf(data=IBGE, aes(fill=n, text = paste(name_muni, "population:", Population), geometry = geom), color= NA, size=.15) +
labs(title="2022 Election: municipalities mentioned", size=10) +
guides(fill = guide_colourbar(title = "Mentions")) +
theme_minimal() +
theme(axis.line = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank(),
panel.grid = element_blank()) +
scale_fill_brewer(palette = "Blues")
InteractiveMap <- ggplotly(Map) %>%
layout(title = list(text = paste0("<B>2022 Election: municipalities mentioned</B>")))
# Ploting an interactive choropleth map
Map_ads2 <- ggplot() +
geom_sf(data=IBGE_ads, aes(fill=n, text = paste(name_muni, "population:", Population), geometry = geom), color= NA, size=.15) +
labs(title="2022 Election: municipalities mentioned", size=10) +
guides(fill = guide_colourbar(title = "Mentions")) +
theme_minimal() +
theme(axis.line = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank(),
panel.grid = element_blank()) +
scale_fill_brewer(palette = "Blues")
InteractiveMap_ads2 <- ggplotly(Map_ads2) %>%
layout(title = list(text = paste0("<B>2022 Election: municipalities mentioned in ads</B>")))
# Ploting an interactive choropleth map
Map_ads2 <- ggplot() +
geom_sf(data=IBGE_ads, aes(fill=n, text = paste(name_muni, "population:", Population), geometry = geom), color= NA, size=.15) +
labs(title="2022 Election: municipalities mentioned", size=10) +
guides(fill = guide_colourbar(title = "Mentions")) +
theme_minimal() +
theme(axis.line = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank(),
panel.grid = element_blank()) +
scale_fill_manual(values = c("lightblue", "dodgerblue", "royalblue", "navyblue"))  # Use custom colors directly
InteractiveMap_ads2 <- ggplotly(Map_ads2) %>%
layout(title = list(text = paste0("<B>2022 Election: municipalities mentioned in ads</B>")))
# Ploting an interactive choropleth map
Map_ads2 <- ggplot() +
geom_sf(data=IBGE_ads, aes(fill=n, text = paste(name_muni, "population:", Population), geometry = geom), color= NA, size=.15) +
labs(title="2022 Election: municipalities mentioned", size=10) +
guides(fill = guide_colourbar(title = "Mentions")) +
theme_minimal() +
theme(axis.line = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank(),
panel.grid = element_blank()) +
scale_fill_viridis()
InteractiveMap_ads2 <- ggplotly(Map_ads2) %>%
layout(title = list(text = paste0("<B>2022 Election: municipalities mentioned in ads</B>")))
InteractiveMap_ads2
# Ploting an interactive choropleth map
Map <- ggplot() +
geom_sf(data=IBGE, aes(fill=n, text = paste(name_muni, "population:", Population), geometry = geom), color= NA, size=.15) +
labs(title="2022 Election: municipalities mentioned", size=10) +
guides(fill = guide_colourbar(title = "Mentions")) +
theme_minimal() +
theme(axis.line = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank(),
panel.grid = element_blank()) +
scale_fill_viridis(limits = c(0, 2200))
InteractiveMap <- ggplotly(Map) %>%
layout(title = list(text = paste0("<B>2022 Election: municipalities mentioned</B>")))
InteractiveMap
InteractiveMap
InteractiveMap_ads2
sum(IBGE$n <10, na.rm=TRUE)
sum(IBGE_ads$n <10, na.rm=TRUE)
ggplot(data = IBGE) +
geom_jitter() +
aes(x = n, y = Population, color = Mesoregion)+
labs(title = "Relationship between mentions and population", x = "Mentions", y = "Population")
BV <- ggplot()+
geom_jitter(data=IBGE, aes(x = n, y = Population, text=name_muni)) +
labs(title = "Relationship between mentions and population (estimated for 2021)", x = "Mentions", y = "population")+
guides(fill = guide_colourbar(title = "Mentions"))
InteractivePopulation <- ggplotly(BV)
InteractivePopulation
ggplot(data = IBGE) +
geom_jitter() +
aes(x = n, y = PIB_per_capita, color = Mesoregion)+
labs(title = "Relationship between PIB per capita and mentions", x = "Mentions", y = "PIB per capita")
BV + facet_wrap(vars(Mesoregion))
load("C:/Users/andre/Documents/GitHub/Cartographies2022BRElection/CartographiesEnvironment(Oct2023).RData")
View(df_total_arranged)
View(IBGE)
